 #include "FastLED.h"
//Pins setup

//Arms
#define numNeoPixelsArm 8
//Left Arm
#define PINLEFTARM 3
//Right Arm
#define PINRIGHTARM 4

//Back 
//For the left and side stripe
#define numNeoPixelsSideBack 36

//Left side
#define PINLEFTBACK 5

//Right side
#define PINRIGHTBACK 6

//Middle: the main one 
#define numNeoPixelsMainBack 51
#define PINMAINBACK 7

//Front
//Up
#define PINUPFRONT 2
#define numNeoPixelsUpFront 9
//Middle
#define PINMIDDLEFRONT 10
#define numNeoPixelsMiddleFront 5
//Down
#define PINDOWNFRONT 9
#define numNeoPixelsDownFront 5


//Define the array of leds for each stripe
//Left Arm
CRGB stripLeftArm[numNeoPixelsArm];
int hueLeftArm = 140; //HSV
int satLeftArm = 75;
int valLeftArm = 255;

//Right arm
CRGB stripRightArm[numNeoPixelsArm];
int hueRightArm = hueLeftArm; //HSV
int satRightArm = satLeftArm;
int valRightArm = valLeftArm;

//Back
//Left side
CRGB stripLeftBack[numNeoPixelsSideBack];
int hueLeftBack = 40; //HSV
int satLeftBack = 220;
int valLeftBack = 200;

//Right side
CRGB stripRightBack[numNeoPixelsSideBack];
int hueRightBack = hueLeftBack; //HSV
int satRightBack = satLeftBack;
int valRightBack = valLeftBack;

//Middle
CRGB stripMainBack[numNeoPixelsMainBack];
int hueMainBack = hueLeftBack; //HSV
int satMainBack = satLeftBack;
int valMainBack = valLeftBack;

//Front
//Up
CRGB stripUpFront[numNeoPixelsUpFront];
int hueUpFront = 40; //HSV
int satUpFront = 220;
int valUpFront = 200;

//Middle
CRGB stripMiddleFront[numNeoPixelsMiddleFront];
int hueMiddleFront = hueUpFront; //HSV
int satMiddleFront = satUpFront;
int valMiddleFront = valUpFront;

//Down
CRGB stripDownFront[numNeoPixelsDownFront];
int hueDownFront = hueUpFront; //HSV
int satDownFront = satUpFront;
int valDownFront = valUpFront;

//Variables for all the accellerometers
int num = 20; //Iterations to smooth the raw values from the acc
long counter = 0; //aux value to to show the chasing lighting efecct.
int accSmoother = 0;

int startTimeCount = 0; //Tracks when a new cycle starts
unsigned long  timeCount = 50;  //Tracks how many milliseconds have passed in total.
unsigned long  timePlus = 50; //Defines how many milliseconds lasts a cycle
unsigned long timeCycle = 0;

//Variables that both accelerometers on the arms use
 //For both X Axis on the arms

 int minReadingXArm = 218; //290 
 int maxReadingXArm = 255; //405

 int minAccArm = 0; //The minimum value that abs(endCycleValue - initCycleValue) may give
 int maxAccArm = 100; //The maximum value that abs(endCycleValue - initCycleValue) may give

 int mapMinAccArm = 0; //The minimum value that accBack may have at the end
 int mapMaxAccArm = 50; //The maximum value that accBack may have at the end

 float animationSpeedArm = 0.4;

  //For both Y Axis on the arms

 int minReadingYArm = 180; //273; 
 int maxReadingYArm = 220; //420

 int mapMinHeightArm = 0;
 int mapMaxHeightArm = 20;

 //For the X on the back

 int minReadingXBack = 180; 
 int maxReadingXBack = 220;

 int minAccBack = 0; //The minimum value that abs(endCycleValue - initCycleValue) may give
 int maxAccBack = 100; //The maximum value that abs(endCycleValue - initCycleValue) may give

 int mapMinAccBack = 0; //The minimum value that accBack may have at the end
 int mapMaxAccBack = 10; //The maximum value that accBack may have at the end

//For the accelerometer on the LEFT Arm. All the variables end with the word "Left"

//X Axis
const int xpinLeft = A0;  //x axis of

int analogValueXLeft = 0; //has the average value of the axis after a "num" number of iterations

int valueXStartLeft = 0; //Tracks the value in the start of every new cycle

int accLeft = 0; //The final value that it is passed to the NeoPixel Function.

//Y Axis
const int ypinLeft = A1;  //y axis of the acc

int analogValueYLeft = 0;

//For the accelerometer on the RIGHT Arm. All the variables end with the word "Right"

//X Axis
const int xpinRight = A2;  //x axis of

int analogValueXRight = 0; //has the average value of the axis after a "num" number of iterations

int valueXStartRight = 0; //Tracks the value in the start of every new cycle

int accRight = 0; //The final value that it is passed to the NeoPixel Function.
//Y Axis
const int ypinRight = A3;  //y axis of the acc

int analogValueYRight = 0;

//For the accelerometer on the Back; All the variables end with the word "Back" 
const int xpinBack = A4;  //x axis of the acc located on the back

int analogValueXBack = 0; //has the average value of the axis after a "num" number of iterations

int valueXStartBack = 0; //Tracks the value in the start of every new cycle

 int accBack = 0; //The final value that it is passed to the NeoPixel Function.

//Variables for Effects

boolean flickering = true;
float flickerSize = 30; // min 30, max 255

//Variables for press button
float overallBrightness = 255;
float brightnessChangeSpeed = 4;
int maxBrightness = 255;
int minBrightness = 30;

int buttonPin = 11;
int buttonValue;
boolean buttonPressed = false;
boolean onOff = true;

void setup() {
  // initialize the serial communications:
  Serial.begin(9600);

  //Button
  pinMode(buttonPin,INPUT_PULLUP);

  //Arms
  FastLED.addLeds<NEOPIXEL, PINLEFTARM>(stripLeftArm, numNeoPixelsArm);  
  FastLED.addLeds<NEOPIXEL, PINRIGHTARM>(stripRightArm, numNeoPixelsArm);

  //Back  
  FastLED.addLeds<NEOPIXEL, PINLEFTBACK>(stripLeftBack, numNeoPixelsSideBack);  
  FastLED.addLeds<NEOPIXEL, PINRIGHTBACK>(stripRightBack, numNeoPixelsSideBack);  
  FastLED.addLeds<NEOPIXEL, PINMAINBACK>(stripMainBack, numNeoPixelsMainBack);  

  //Front
  FastLED.addLeds<NEOPIXEL, PINUPFRONT>(stripUpFront, numNeoPixelsUpFront);  
  FastLED.addLeds<NEOPIXEL, PINMIDDLEFRONT>(stripMiddleFront, numNeoPixelsMiddleFront);  
  FastLED.addLeds<NEOPIXEL, PINDOWNFRONT>(stripDownFront, numNeoPixelsDownFront);  


}

void loop() {

  //Press Button
  // make use of the button  
  buttonValue = digitalRead(buttonPin);
  
  //Serial.println(buttonValue);
  
  if(buttonValue==0 && buttonPressed==false){
    buttonPressed = true; 
    onOff=!onOff; 
  }
  if(buttonValue == 1){
    buttonPressed = false;
  }

  //depending on the state adjust the brightness quickly
  if(onOff && overallBrightness<maxBrightness){
    overallBrightness+=brightnessChangeSpeed;
    //strip.setBrightness(overallBrightness); //this should be adjusted to affect the brightnesses
    FastLED.setBrightness(overallBrightness);
  }

  if(!onOff && overallBrightness>minBrightness){
    overallBrightness-=brightnessChangeSpeed;
    FastLED.setBrightness(overallBrightness);
  }

  counter++;

  //setChasingLight(stripLeftX, numNeoPixelsArm, animationSpeedArm, counter);
  
  //setChasingLight(stripLeftX, numNeoPixelsBack, animationSpeedArm, counter);
  //setChasingLight(stripRightX, numNeoPixelsBack, animationSpeedArm, counter);

  
  for(int i = 0; i < num; i++){

    analogValueXLeft += analogRead(xpinLeft);  
    analogValueYLeft += analogRead(ypinLeft);
    
    analogValueXRight += analogRead(xpinRight);  
    analogValueYRight += analogRead(ypinRight); 

    analogValueXBack += analogRead(xpinBack);
    
    delay(0);
  }

  analogValueXLeft = analogValueXLeft/num;
  analogValueYLeft = analogValueYLeft/num;
  
  analogValueXRight = analogValueXRight/num;
  analogValueYRight = analogValueYRight/num;

  analogValueXBack = analogValueXBack/num;

  if (startTimeCount == 0){
    valueXStartLeft = analogValueXLeft;
    
    valueXStartRight = analogValueXRight;

    valueXStartBack = analogValueXBack;
  }

  analogValueXLeft = constrain(analogValueXLeft, minReadingXArm, maxReadingXArm);
  
  analogValueXRight = constrain(analogValueXRight, minReadingXArm, maxReadingXArm);

  analogValueXBack = constrain(analogValueXBack, minReadingXBack, maxReadingXBack);

  timeCycle = millis();

  //If a certain period of time passes enters the if
  //For the X axis in the left and right arms.
  //For the X axis on the back.
  if (timeCycle >= timeCount){
    int diffAccLeft = abs(analogValueXLeft - valueXStartLeft);

    if (diffAccLeft <20) {
      diffAccLeft = 0;
    }
    
    accLeft = diffAccLeft;
    accLeft = mapValue(accLeft, minAccArm, maxAccArm, mapMinAccArm, mapMaxAccArm);

    //if(accLeft <= 40){
      //accLeft = 5;
    //}
    
    accRight = abs(analogValueXRight - valueXStartRight);
    accRight = mapValue(accRight, minAccArm, maxAccArm, mapMinAccArm, mapMaxAccArm);

    //if(accRight <= 20){
      //accRight = 5;
    //}

    accBack = abs(analogValueXBack - valueXStartBack);
    accBack = mapValue(accBack, minAccBack, maxAccBack, mapMinAccBack, mapMaxAccBack);

    //if(accBack <= 60){
      //accBack = 5;
    //}

    //Serial.println(accLeft);
      
    if(accSmoother < diffAccLeft) {
      accSmoother = diffAccLeft;
    }    

    //Add effect
    

    //To control the frecuency that it enters the if
    timeCount = timeCount + timePlus;
    startTimeCount = 0;
  }
  else{
    startTimeCount = 1;
  }


  //Left Arm
  if(accSmoother > 0){
    accSmoother = accSmoother - 2;
  }

  //Serial.println(accSmoother);

  flickerSize = accSmoother;

  //flickerSize = constrain(flickerSize, 0, 100);
  //flickerSize = map(flickerSize, 0, 100, 0, 100);
  //flickerSize = flickerSize / 100.0;

  //Serial.println(flickerSize);
  
  //Serial.println(accSmoother);
  //For hands up and down controlled by Y axis in right and left arm

  analogValueYLeft = mapValue(analogValueYLeft, minReadingYArm, maxReadingYArm, mapMinHeightArm, mapMaxHeightArm);
  analogValueYRight = mapValue(analogValueYRight, minReadingYArm, maxReadingYArm, mapMinHeightArm, mapMaxHeightArm);
  
  //if(analogValueYLeft <= 5){
    //  analogValueYLeft = analogValueYLeft + 5;
  //}
  
  //analogValueYRight = mapValue(analogValueYRight, minReadingYArm, maxReadingYArm, mapMinHeightArm, mapMaxHeightArm);

  //if(analogValueYRight <= 5){
    //  analogValueYRight = analogValueYRight + 5;
  //}

  //Compares when hands are up and down

  //if(analogValueYLeft > analogValueYRight){
    //Left Arm is higher

  //}
  //else if (analogValueYLeft < analogValueYRight){
    //Right Arm is higher

  //}
  //else{
    //Same high for both arms

  //}
  
  //Add effect

  //Left Arm
  for(int i=0;i<numNeoPixelsArm ;i++){
    float sine = sin((i*TWO_PI/numNeoPixelsArm)+counter*animationSpeedArm);
    float phase=map(sine*1000,-1000,1000,0,1000)/1000.0;

    //stripLeftArm[i] = CRGB( 100*phase, 255*phase, 255*phase);
    //stripLeftArm[i] = CHSV(hueLeftArm, satLeftArm, valLeftArm);
    stripLeftArm[i] = CHSV(hueLeftArm, satLeftArm, valLeftArm*phase);
    //pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    //stripLeftX.setPixelColor(i, stripLeftX.Color(100*phase,255*phase,255*phase)); // Moderately bright green color.
    
    //stripLeftX.show(); // This sends the updated pixel color to the hardware.

    //delay(0); // Delay for a period of time (in milliseconds).
   }

   //Right arm X
   for(int i=0;i<numNeoPixelsArm ;i++){
    float sine = sin((i*TWO_PI/numNeoPixelsArm)+counter*animationSpeedArm);
    float phase=map(sine*1000,-1000,1000,0,1000)/1000.0;
    
    //pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    //stripRightX.setPixelColor(i, stripRightX.Color(100*phase,255*phase,255*phase)); // Moderately bright green color.
    //stripRightArm[i] = CHSV(hueRightArm, satRightArm, valRightArm);
    stripRightArm[numNeoPixelsArm-1-i] = CHSV(hueRightArm, satRightArm, valRightArm*phase);
    //stripRightX.show(); // This sends the updated pixel color to the hardware.

    //delay(0); // Delay for a period of time (in milliseconds).
   }


  flickerSize = 30;
  
   //RightBack
  if(flickering){
       for(int i=0;i<numNeoPixelsSideBack ;i++){

        stripRightBack[i] = CHSV(hueMainBack + analogValueYLeft + analogValueYRight, satMainBack, valRightBack-sin(-counter*0.3+i*0.6)*flickerSize);
        }
   }else{
      for(int i=0;i<numNeoPixelsSideBack ;i++){
        stripRightBack[i] = CHSV(hueRightBack + analogValueYLeft + analogValueYRight, satRightBack, valRightBack);
      }
    }


   //LeftBack
   if(flickering){
     for(int i=0;i<numNeoPixelsSideBack ;i++){
        //stripLeftBack[i] = CHSV(hueMainBack + analogValueYLeft + analogValueYRight, satMainBack, valLeftBack-(sin(-counter*0.3+i*0.6)*flickerSize + flickerSize) * valLeftBack);
        stripLeftBack[i] = CHSV(hueMainBack + analogValueYLeft + analogValueYRight, satMainBack, valLeftBack-sin(-counter*0.3+i*0.6)*flickerSize);

     }
   }else{
         for(int i=0;i<numNeoPixelsSideBack ;i++){
      stripLeftBack[i] = CHSV(hueLeftBack + analogValueYLeft + analogValueYRight, satLeftBack, valLeftBack);
     }
   }

    //MainBack
    if(flickering){ 
       for(int i=0;i<numNeoPixelsMainBack ;i++){
        stripMainBack[i] = CHSV(hueMainBack + analogValueYLeft + analogValueYRight, satMainBack, valMainBack-sin(-counter*0.3+i*0.6)*flickerSize);
       }
    }else{
       for(int i=0;i<numNeoPixelsMainBack ;i++){
        stripMainBack[i] = CHSV(hueMainBack + analogValueYLeft + analogValueYRight, satMainBack, valMainBack);
       } 
    }

  //Front
  for(int i=0;i<numNeoPixelsUpFront ;i++){
    stripUpFront[i] = CHSV(hueUpFront + analogValueYLeft + analogValueYRight, satUpFront, valUpFront);
  }

  //Middle
  for(int i=0;i<numNeoPixelsMiddleFront ;i++){
    stripMiddleFront[i] = CHSV(hueMiddleFront + analogValueYLeft + analogValueYRight, satMiddleFront, valMiddleFront);
  }

  //Down
  for(int i=0;i<numNeoPixelsDownFront ;i++){
    stripDownFront[i] = CHSV(hueDownFront + analogValueYLeft + analogValueYRight, satDownFront, valDownFront);
  }
  
  //Reinitilize values
  //Left arm
  analogValueXLeft = 0;
  analogValueYLeft = 0;
  
  //Right arm
  analogValueXRight = 0;
  analogValueYRight = 0;

  //Back
  analogValueXBack = 0;
  
  //Update leds
  FastLED.show();
  
}

int mapValue(int value, int minReadingValue, int maxReadingValue, int minMapValue, int maxMapValue) {

  //Serial.print("Original Value = " ); 
  //Serial.print(value);  
  
  int auxValue = 0;
  int valueOut = 0;
  
  auxValue = value;
  auxValue = constrain(auxValue, minReadingValue, maxReadingValue);
  
  //Serial.print(" analogValue = " ); 
  //Serial.print(auxValue);  

  valueOut = map(auxValue, minReadingValue, maxReadingValue, minMapValue, maxMapValue);
  valueOut = constrain(valueOut, minMapValue, maxMapValue);

  //Serial.print(" scaled to " );
  //Serial.print(valueOut, DEC);
  //Serial.println();

  return valueOut;
}